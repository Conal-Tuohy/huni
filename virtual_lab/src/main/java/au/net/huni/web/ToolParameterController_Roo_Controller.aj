// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.net.huni.web;

import au.net.huni.model.HistoryItem;
import au.net.huni.model.ToolParameter;
import au.net.huni.web.ToolParameterController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ToolParameterController_Roo_Controller {
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ToolParameterController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ToolParameter());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (HistoryItem.countHistoryItems() == 0) {
            dependencies.add(new String[] { "historyitem", "historyitems" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "toolparameters/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ToolParameterController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("toolparameter", ToolParameter.findToolParameter(id));
        uiModel.addAttribute("itemId", id);
        return "toolparameters/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ToolParameterController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("toolparameters", ToolParameter.findToolParameterEntries(firstResult, sizeNo));
            float nrOfPages = (float) ToolParameter.countToolParameters() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("toolparameters", ToolParameter.findAllToolParameters());
        }
        return "toolparameters/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ToolParameterController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ToolParameter.findToolParameter(id));
        return "toolparameters/update";
    }
    
    void ToolParameterController.populateEditForm(Model uiModel, ToolParameter toolParameter) {
        uiModel.addAttribute("toolParameter", toolParameter);
        uiModel.addAttribute("historyitems", HistoryItem.findAllHistoryItems());
    }
    
    String ToolParameterController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
